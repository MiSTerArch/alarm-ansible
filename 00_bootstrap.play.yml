- name: Create Arch Linux ARM rootfs chroot
  vars:
    rootfs: 'ArchLinuxARM-aarch64-latest' # variant that alarm calls its tar gz
    build: '{{playbook_dir}}/build'
    chroot: '{{build}}/chroot'
  hosts: localhost
  tags: chroot

  tasks:
    - name: Download Arch Linux ARM
      ansible.builtin.get_url:
        url: 'http://os.archlinuxarm.org/os/{{rootfs}}.tar.gz'
        checksum: 'md5:http://os.archlinuxarm.org/os/{{rootfs}}.tar.gz.md5'
        dest: '{{build}}/{{rootfs}}.tar.gz'
      tags: aquire

    - name: Download Arch Linux ARM signature
      ansible.builtin.get_url:
        url: 'http://os.archlinuxarm.org/os/{{rootfs}}.tar.gz.sig'
        dest: '{{build}}/{{rootfs}}.tar.gz.sig'
      tags: aquire

    - name: Check GPG Signature of Arch Linux ARM
      ansible.builtin.shell:
        chdir: '{{build}}'
        cmd: |
          gpg --keyserver hkps://keyserver.ubuntu.com --recv-key 68B3537F39A313B3E574D06777193F152BDBE6A6
          gpg --verify '{{rootfs}}.tar.gz.sig' '{{rootfs}}.tar.gz'
      tags: aquire

    - name: Creates Arch Linux ARM directory
      ansible.builtin.file:
        path: '{{chroot}}'
        state: directory
      tags: aquire

    - name: Extract Arch Linux ARM
      ansible.builtin.unarchive:
        remote_src: yes
        src: '{{build}}/{{rootfs}}.tar.gz'
        dest: '{{chroot}}'
        creates: '{{chroot}}/var/log' # about the last thing from that archive
      tags: aquire

    - name: Bootstrap chroot (install python for ansible)
      ansible.builtin.shell:
        chdir: '{{playbook_dir}}'
        cmd: |
          './chroot.sh' {{chroot}} bash -c '
            pacman-key --init;
            pacman-key --populate archlinuxarm;
            pacman -Sy python --noconfirm
          '
        creates:
          '{{chroot}}/usr/bin/python'
      tags: aquire

    - name: Add chroot host to inventory
      ansible.builtin.add_host:
        groups: archlinuxarm
        name: chroot
        ansible_connection: community.general.chroot
        ansible_host: "{{chroot}}"
        ansible_chroot_exe: "{{playbook_dir}}/chroot.sh"
        ansible_python_interpreter: "/usr/bin/python"
      tags: chroot_inventory


- name: Installation of packages and things as root
  hosts: archlinuxarm

  tasks:
    - name: Update packages
      community.general.pacman:
        update_cache: yes
        upgrade: yes
      tags: update

    - name: Install more "base" packages
      community.general.pacman:
        package:
          - sudo
          - git
          - base-devel
          - vim
          - nano
          - networkmanager
          - openssh
          - btrfs-progs
          - arch-install-scripts
          - python-setuptools
          - python-pip
        state: present
      tags: install

    - name: Install aux tool packages
      community.general.pacman:
        package:
          - lshw
          - usbutils # lsusb is here
          - htop
          - wget
          - man
          - stress
          - screen
        state: present
      tags: install

    - name: Make wheel sudoers with NOPASSWD
      ansible.builtin.lineinfile:
          dest: /etc/sudoers
          regexp: '^#.*%wheel.*NOPASSWD.*'
          line: '%wheel ALL=(ALL) NOPASSWD: ALL'
          validate: /usr/sbin/visudo -cf %s
      tags: provision

    - name: Enable and start NetworkManager
      ansible.builtin.systemd:
        name: NetworkManager
        enabled: yes
      tags: provision

    - name: Enable and start sshd
      ansible.builtin.systemd:
        name: sshd
        enabled: yes
      tags: provision

    - name: makepkg config
      debug: msg="TODO"
      tags: provision

    - name: pacman config
      debug: msg="TODO"
      tags: provision
